{"version":3,"sources":["string-factory.min.js"],"names":["StringFactory","tag","attrs","children","openTagContents","Array","isArray","join","push","key","undefined","concat","quote","openTag","child","value","arguments","length","String","exps","replace","RegExp","match","p1","shift","exp","caption","thead","tbody","tfoot","style","filter","properties","property","_typeof","apply","_toConsumableArray","processProperties","func","args","body","expIf","trueValue","falseValue","expLoop","loopExp","joiner"],"mappings":"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","file":"string-factory.min.js","sourcesContent":["const StringFactory = (() => {\n\tfunction tag(tag, attrs, children) {\n\t\tconst openTagContents = [tag];\n\t\tif (attrs) {\n\t\t\tif (Array.isArray(attrs)) {\n\t\t\t\tattrs = attrs.join(' ');\n\t\t\t}\n\n\t\t\tif (typeof attrs === 'string') {\n\t\t\t\topenTagContents.push(attrs);\n\t\t\t} else {\n\t\t\t\tfor (const key in attrs) {\n\t\t\t\t\tif (attrs[key] === undefined) {\n\t\t\t\t\t\t// DO NOTHING\n\t\t\t\t\t} else if (attrs[key] === null) {\n\t\t\t\t\t\topenTagContents.push(key);\n\t\t\t\t\t} else {\n\t\t\t\t\t\topenTagContents.push(`${key}=${quote(attrs[key], '\"')}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst openTag = `<${openTagContents.join(' ')}>`;\n\n\t\tif (children === undefined || children === null) {\n\t\t\treturn openTag;\n\t\t}\n\n\t\tif (Array.isArray(children)) {\n\t\t\tchildren = children.filter((child) => child !== null).join('');\n\t\t}\n\n\t\treturn `${openTag}${children}</${tag}>`;\n\t}\n\n\tfunction table(attrs, caption, thead, tbody, tfoot) {\n\t\treturn tag('table', attrs, [\n\t\t\ttag('caption', {}, caption),\n\t\t\tthead ? tag('thead', {}, thead) : null,\n\t\t\ttag('tbody', {}, tbody),\n\t\t\ttfoot ? tag('tfoot', {}, tfoot) : null\n\t\t]);\n\t}\n\n\tfunction style(properties) {\n\t\tfunction processProperties(properties) {\n\t\t\tconst value = [];\n\n\t\t\tfor (const key in properties) {\n\t\t\t\tlet property = properties[key];\n\n\t\t\t\tif (!property) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (Array.isArray(property)) {\n\t\t\t\t\tif (key === 'font-family') {\n\t\t\t\t\t\tproperty = property.join(', ');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tproperty = property.join(' ');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (typeof property === 'object') {\n\t\t\t\t\tvalue.push(`${key} {`);\n\t\t\t\t\tvalue.push(...processProperties(property));\n\t\t\t\t\tvalue.push('}');\n\t\t\t\t} else {\n\t\t\t\t\tvalue.push(`${key}: ${property};`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\n\t\treturn processProperties(properties).join(' ');\n\t}\n\n\tfunction quote(value, quote = '`') {\n\t\tif (Array.isArray(value)) {\n\t\t\tvalue = value.join('');\n\t\t}\n\n\t\tif (typeof value !== 'string') {\n\t\t\tvalue = String(value);\n\t\t}\n\n\t\tconst exps = [];\n\t\tvalue = value\n\t\t\t.replace(new RegExp('{{ (.+?) }}', 'g'), (match, p1) => {\n\t\t\t\texps.push(p1);\n\t\t\t\treturn '{{ }}';\n\t\t\t})\n\t\t\t.replace(new RegExp(`\\\\\\\\${quote}`, 'g'), `\\\\\\\\${quote}`)\n\t\t\t.replace(new RegExp(`${quote}`, 'g'), `\\\\${quote}`)\n\t\t\t.replace(new RegExp('{{ }}', 'g'), () => {\n\t\t\t\tif (quote === '`') {\n\t\t\t\t\treturn `\\${${exps.shift()}}`;\n\t\t\t\t} else {\n\t\t\t\t\treturn `${quote} + (${exps.shift()}) + ${quote}`;\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn `${quote}${value}${quote}`;\n\t}\n\n\tfunction func (args, body) {\n\t\tif (Array.isArray(args)) {\n\t\t\targs = args.filter((child) => child !== null).join(', ');\n\t\t}\n\n\t\treturn `(${args || ''}) => ${body}`;\n\t}\n\n\tfunction exp(value) {\n\t\treturn `{{ ${value} }}`;\n\t}\n\n\tfunction expIf(condition, trueValue, falseValue) {\n\t\treturn exp(`${condition} ? ${trueValue} : ${falseValue}`);\n\t}\n\n\tfunction expLoop(loopExp, body, joiner = '') {\n\t\treturn exp(`(() => { const expLoopValue = []; for(${loopExp}) { expLoopValue.push(${body}); } return expLoopValue.join(${quote(joiner)}); })()`);\n\t}\n\n\treturn { tag, table, style, quote, func, exp, expIf, expLoop };\n})();\n\n/* exported stringFactory */\n"]}