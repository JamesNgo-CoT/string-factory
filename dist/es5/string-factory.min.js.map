{"version":3,"sources":["string-factory.min.js"],"names":["StringFactory","tag","attrs","children","openTagContents","Array","isArray","join","push","key","undefined","quote","openTag","concat","child","caption","thead","tbody","tfoot","filter","value","properties","property","_typeof","style","apply","_toConsumableArray","processProperties","arguments","length","String","exps","replace","RegExp","match","p1","shift","func","body","args","exp","condition","falseValue","trueValue","expLoop","loopExp","joiner"],"mappings":"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","file":"string-factory.min.js","sourcesContent":["const StringFactory = {};\n\nStringFactory.tag = (tag, attrs, children) => {\n\tconst openTagContents = [tag];\n\tif (attrs) {\n\t\tif (Array.isArray(attrs)) {\n\t\t\tattrs = attrs.join(' ');\n\t\t}\n\n\t\tif (typeof attrs === 'string') {\n\t\t\topenTagContents.push(attrs);\n\t\t} else {\n\t\t\tfor (const key in attrs) {\n\t\t\t\tif (attrs[key] === undefined) {\n\t\t\t\t\t// DO NOTHING\n\t\t\t\t} else if (attrs[key] === null) {\n\t\t\t\t\topenTagContents.push(key);\n\t\t\t\t} else {\n\t\t\t\t\topenTagContents.push(`${key}=${StringFactory.quote(attrs[key], '\"')}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tconst openTag = `<${openTagContents.join(' ')}>`;\n\n\tif (children === undefined || children === null) {\n\t\treturn openTag;\n\t}\n\n\tif (Array.isArray(children)) {\n\t\tchildren = children.filter((child) => child !== null).join('');\n\t}\n\n\treturn `${openTag}${children}</${tag}>`;\n};\n\nStringFactory.table = (attrs, caption, thead, tbody, tfoot) => {\n\treturn StringFactory.tag('table', attrs, [\n\t\tStringFactory.tag('caption', {}, caption),\n\t\tthead ? StringFactory.tag('thead', {}, thead) : null,\n\t\tStringFactory.tag('tbody', {}, tbody),\n\t\ttfoot ? StringFactory.tag('tfoot', {}, tfoot) : null\n\t]);\n};\n\nStringFactory.style = (properties) => {\n\tfunction processProperties(properties) {\n\t\tconst value = [];\n\n\t\tfor (const key in properties) {\n\t\t\tlet property = properties[key];\n\n\t\t\tif (!property) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (Array.isArray(property)) {\n\t\t\t\tif (key === 'font-family') {\n\t\t\t\t\tproperty = property.join(', ');\n\t\t\t\t} else {\n\t\t\t\t\tproperty = property.join(' ');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof property === 'object') {\n\t\t\t\tvalue.push(`${key} {`);\n\t\t\t\tvalue.push(...processProperties(property));\n\t\t\t\tvalue.push('}');\n\t\t\t} else {\n\t\t\t\tvalue.push(`${key}: ${property};`);\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t}\n\n\treturn processProperties(properties).join(' ');\n};\n\nStringFactory.quote = (value, quote = '`') => {\n\tif (Array.isArray(value)) {\n\t\tvalue = value.join('');\n\t}\n\n\tif (typeof value !== 'string') {\n\t\tvalue = String(value);\n\t}\n\n\tconst exps = [];\n\tvalue = value\n\t\t.replace(new RegExp('{{ (.+?) }}', 'g'), (match, p1) => {\n\t\t\texps.push(p1);\n\t\t\treturn '{{ }}';\n\t\t})\n\t\t.replace(new RegExp(`\\\\\\\\${quote}`, 'g'), `\\\\\\\\${quote}`)\n\t\t.replace(new RegExp(`${quote}`, 'g'), `\\\\${quote}`)\n\t\t.replace(new RegExp('{{ }}', 'g'), () => {\n\t\t\tif (quote === '`') {\n\t\t\t\treturn `\\${${exps.shift()}}`;\n\t\t\t} else {\n\t\t\t\treturn `${quote} + (${exps.shift()}) + ${quote}`;\n\t\t\t}\n\t\t});\n\n\treturn `${quote}${value}${quote}`;\n};\n\nStringFactory.func = (args, body) => {\n\tif (Array.isArray(args)) {\n\t\targs = args.filter((child) => child !== null).join(', ');\n\t}\n\n\treturn `(${args || ''}) => ${body}`;\n};\n\nStringFactory.exp = (value) => {\n\treturn `{{ ${value} }}`;\n};\n\nStringFactory.expIf = (condition, trueValue, falseValue) => {\n\treturn StringFactory.exp(`${condition} ? ${trueValue} : ${falseValue}`);\n};\n\nStringFactory.expLoop = (loopExp, body, joiner = '') => {\n\treturn StringFactory.exp(`(() => { const expLoopValue = []; for(${loopExp}) { expLoopValue.push(${body}); } return expLoopValue.join(${StringFactory.quote(joiner)}); })()`);\n};\n\n/* exported stringFactory */\n"]}