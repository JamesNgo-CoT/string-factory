const StringFactory={tag:(t,r,o)=>{const n=[t];if(r)if(Array.isArray(r)&&(r=r.join(" ")),"string"==typeof r)n.push(r);else for(const t in r)void 0===r[t]||(null===r[t]?n.push(t):n.push(`${t}=${StringFactory.quote(r[t],'"')}`));const e=`<${n.join(" ")}>`;return null==o?e:(Array.isArray(o)&&(o=o.filter((t=>null!==t)).join("")),`${e}${o}</${t}>`)},table:(t,r,o,n,e)=>StringFactory.tag("table",t,[StringFactory.tag("caption",{},r),o?StringFactory.tag("thead",{},o):null,StringFactory.tag("tbody",{},n),e?StringFactory.tag("tfoot",{},e):null]),style:t=>function t(r){const o=[];for(const n in r){let e=r[n];e&&(Array.isArray(e)&&(e="font-family"===n?e.join(", "):e.join(" ")),"object"==typeof e?(o.push(`${n} {`),o.push(...t(e)),o.push("}")):o.push(`${n}: ${e};`))}return o}(t).join(" "),quote:(t,r="`")=>{Array.isArray(t)&&(t=t.join("")),"string"!=typeof t&&(t=String(t));const o=[];return t=t.replace(new RegExp("{{ (.+?) }}","g"),((t,r)=>(o.push(r),"{{ }}"))).replace(new RegExp(`\\\\${r}`,"g"),`\\\\${r}`).replace(new RegExp(`${r}`,"g"),`\\${r}`).replace(new RegExp("{{ }}","g"),(()=>"`"===r?`\${${o.shift()}}`:`${r} + (${o.shift()}) + ${r}`)),`${r}${t}${r}`},func:(t,r)=>(Array.isArray(t)&&(t=t.filter((t=>null!==t)).join(", ")),`(${t||""}) => ${r}`),exp:t=>`{{ ${t} }}`,expIf:(t,r,o)=>StringFactory.exp(`${t} ? ${r} : ${o}`),expLoop:(t,r,o="")=>StringFactory.exp(`(() => { const expLoopValue = []; for(${t}) { expLoopValue.push(${r}); } return expLoopValue.join(${StringFactory.quote(o)}); })()`)};
//# sourceMappingURL=string-factory.min.js.map
